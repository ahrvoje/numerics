from fractions import Fraction

from reduction.modpi import modpi


# Set of tests created using Kahan-McDonald algorithm for calculation of the worst argument reduction case.
# A single test is a tuple containing (k, significand, exponent, epsilon) for reduction of
# significand * 2**exponent float into (-k*pi/2, k*pi/2) interval.
tests = [
    (1, 6381956970095103, 798, 9.3743318485092553e-19),
    (Fraction(1, 2), 6381956970095103, 797, 4.6871659242546277e-19),
    (2, 6381956970095103, 799, 1.8748663697018511e-18),
    (Fraction(1, 3), 8509275960126804, 796, 3.1247772828364184e-19),
    (3, 5850965514341686, 526, 4.9707325752370692e-18),
    (Fraction(1, 4), 6381956970095103, 796, 2.3435829621273138e-19),
    (4, 6381956970095103, 800, 3.7497327394037021e-18),
    (Fraction(1, 5), 7621563645717625, 42, 4.6271902625519713e-19),
    (5, 6808218460873451, 563, 7.3802180252162538e-18),
    (Fraction(1, 6), 8509275960126804, 795, 1.5623886414182092e-19),
    (6, 5850965514341686, 527, 9.9414651504741384e-18),
    (Fraction(1, 7), 6392553305823052, 159, 9.3599377963382148e-19),
    (7, 7750232865711478, 436, 1.6967741587615345e-17),
    (Fraction(1, 8), 6381956970095103, 795, 1.1717914810636569e-19),
    (8, 6381956970095103, 801, 7.4994654788074042e-18),
    (Fraction(1, 10), 7621563645717625, 41, 2.3135951312759857e-19),
    (10, 6808218460873451, 564, 1.4760436050432508e-17),
    (Fraction(1, 50), 7448359865014732, 655, 3.4451957972883025e-20),
    (50, 5810242949076222, 716, 3.3379844956402054e-16),
    (Fraction(1, 1024), 6381956970095103, 788, 9.1546209458098196e-22),
    (1024, 6381956970095103, 808, 9.5993158128734774e-16),
    (Fraction(1, 9999), 5194647583145894, 561, 2.3384339348389625e-22),
    (9999, 6478635370053307, 359, 4.0083054984171741e-15),
    (Fraction(2, 3), 8509275960126804, 797, 6.2495545656728369e-19),
    (Fraction(3, 2), 5850965514341686, 525, 2.4853662876185346e-18),
    (Fraction(5, 7), 4821861851714696, 636, 2.2966785575123842e-18),
    (Fraction(7, 5), 8831695978415509, 153, 1.9947636833721835e-18),
    (Fraction(3, 13), 2958935982819588, -47, 2.8568337073308818e-19),
    (Fraction(13, 3), 5648695676206402, 888, 1.248987129188666e-17),
    (Fraction(8, 93), 6418638918091732, 120, 2.0391965340569134e-19),
    (Fraction(93, 8), 5934575450785442, 553, 8.1175538969241169e-18),
]


def test_passed(test):
    k, significand, exp, correctly_reduced = test

    _, reduced = modpi(float(significand * 2**exp), k)
    if reduced == correctly_reduced:
        return True
    else:
        print("Test failed!    k =", k)
        return False


if all(test_passed(test) for test in tests):
    print("All tests passed.")

# All tests passed.
# Python 3.6.2 64bit
