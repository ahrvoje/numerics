(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     24312,        590]
NotebookOptionsPosition[     23872,        571]
NotebookOutlinePosition[     24371,        591]
CellTagsIndexPosition[     24328,        588]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
Author: Hrvoje Abraham
Date: 24.04.2016.
License: MIT

Floating point string to correctly rounded double precision value conversion \
based on the AlgorithmM available in 

http://www.cesura17.net/~will/professional/research/papers/howtoread.pdf 

and in the simplified form at

http://www.exploringbinary.com/correct-decimal-to-floating-point-using-big-\
integers/
    
Values are rounded according to IEEE-754 round-half-to-even rule. This is \
currently the only rounding mode.

It\[CloseCurlyQuote]s rigorously tested against the most pathological inputs \
and halfway cases, such as specially constructed 1000+ bytes long strings and \
other known-to-be-problematic inputs. But one never knows...

Implementation is not speed optimized, safety and transparency was the \
priority.

Valid inputs are integers, C99 language standard decimal double precision \
floating constants (section 6.4.4.2) and special values [-]inf and [-]nan \
(section 7.19.6.1.8).

The only non-standardized constraint is that NaN value string can\
\[CloseCurlyQuote]t contain closing parenthesis \[OpenCurlyDoubleQuote])\
\[CloseCurlyDoubleQuote] inside optional parentheses, e.g. input \
\[OpenCurlyDoubleQuote]nan(type_0)_123)\[CloseCurlyDoubleQuote] is not \
allowed, while \[OpenCurlyDoubleQuote]nan(type_0_123)\[CloseCurlyDoubleQuote] \
is valid. This practice is widely spread among standard-compliant \
implementations.

NaN sign is handled and preserved by all the methods. Other NaN payload is \
discarded, in binary representation mantissa is set to 1.

About the methods:
  - StringToDoubleKernel : returns double precision value sign, significand \
and exponent
  - StringToDouble : returns double precision value based on \
StringToDoubleKernel output
  - StringToDoubleB : returns IEEE-754 64-bit binary representation of double \
precision value
  - StringToDoubleI : returns unreduced integer representation of double \
precision value\
\>", "Text",
 CellChangeTimes->{{3.670513680503665*^9, 3.670513722955186*^9}, {
   3.6705140845996556`*^9, 3.6705143362761507`*^9}, {3.6705143742691936`*^9, 
   3.6705145253609347`*^9}, {3.6705146470221453`*^9, 3.670514664777693*^9}, {
   3.6705148562588463`*^9, 3.6705151348902187`*^9}, {3.6705152262183275`*^9, 
   3.6705153108260803`*^9}, {3.670515497681615*^9, 3.6705155287220955`*^9}, {
   3.6705156342903967`*^9, 3.6705156516503077`*^9}, {3.670515706195066*^9, 
   3.6705157802739725`*^9}, {3.670515858524974*^9, 3.6705158593891897`*^9}, {
   3.6705161984225597`*^9, 3.670516370363154*^9}, {3.6705164076373215`*^9, 
   3.670516413490594*^9}, {3.6705165067361345`*^9, 3.6705165095385456`*^9}, {
   3.670516568930561*^9, 3.6705166624102097`*^9}, {3.6705167749120398`*^9, 
   3.670516843434101*^9}, {3.67051690529788*^9, 3.670516948994418*^9}, {
   3.6705172702192717`*^9, 3.6705172705922136`*^9}, {3.6705174148764133`*^9, 
   3.6705174223956723`*^9}, {3.6705174737155533`*^9, 3.670517508033964*^9}, {
   3.6705178926580467`*^9, 3.6705179017217407`*^9}, {3.670517978338539*^9, 
   3.6705180189378843`*^9}, {3.670518074944954*^9, 3.6705180851374893`*^9}, {
   3.67051811708927*^9, 3.6705181181908865`*^9}, {3.670519360304815*^9, 
   3.6705193608852267`*^9}, {3.67052011300823*^9, 3.6705201412779675`*^9}, {
   3.6705201881448307`*^9, 3.6705202117034683`*^9}, {3.6705202473279037`*^9, 
   3.670520256143914*^9}, {3.6705203037257986`*^9, 3.6705203086005783`*^9}, {
   3.670520339775756*^9, 3.6705203415039616`*^9}, {3.6705204912782187`*^9, 
   3.6705205444806967`*^9}, {3.670520606927962*^9, 3.670520635332832*^9}, {
   3.6705206683055964`*^9, 3.6705206714474354`*^9}, {3.6705207274588633`*^9, 
   3.6705207299556904`*^9}, {3.6705208911905203`*^9, 
   3.6705209196128426`*^9}, {3.6705210612061825`*^9, 
   3.6705210618052783`*^9}, {3.670521225023518*^9, 3.6705212556721306`*^9}, {
   3.670521408676464*^9, 3.670521412230238*^9}, {3.670521565784258*^9, 
   3.670521598572693*^9}, {3.670521639779775*^9, 3.6705216550158906`*^9}, 
   3.6705218456866693`*^9, {3.670521878015579*^9, 3.6705218992550507`*^9}, {
   3.6705239258208513`*^9, 3.6705239333322363`*^9}, 3.6705242213909655`*^9, {
   3.6705594017711554`*^9, 3.670559401836365*^9}, 3.670780293301754*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StringToDoubleKernel", "[", "str_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "fpRegex", ",", "s", ",", "sign", ",", "mantissa", ",", "exponent", ",",
        "int", ",", "frac", ",", "decimals", ",", "a", ",", "scale", ",", "n",
        ",", "d", ",", "sd", ",", "r"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"check", " ", "the", " ", "formatting"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fpRegex", "=", 
       RowBox[{
       "RegularExpression", "[", 
        "\"\<(?i)^[-+]?((((\\\\d+\\\\.?)|(\\\\d*\\\\.\\\\d+))(e[-+]?\\\\d+)?)|\
(inf(inity)?)|(nan(\\\\([^)]*\\\\))?))$\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", 
          RowBox[{"StringCases", "[", 
           RowBox[{"str", ",", "fpRegex"}], "]"}]}], "\[Equal]", "0"}], ",", 
        RowBox[{
        "Throw", "[", "\"\<Invalid floating point string format.\>\"", 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"ToLowerCase", "[", "str", "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"extract", " ", "the", " ", "sign"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"sign", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"s", ",", "1"}], "]"}], "\[Equal]", "\"\<-\>\""}], ",", 
        RowBox[{
         RowBox[{"sign", "=", 
          RowBox[{"-", "1"}]}], ";", 
         RowBox[{"s", "=", 
          RowBox[{"StringDrop", "[", 
           RowBox[{"s", ",", "1"}], "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"s", ",", "1"}], "]"}], "\[Equal]", "\"\<+\>\""}], ",", 
        RowBox[{"s", "=", 
         RowBox[{"StringDrop", "[", 
          RowBox[{"s", ",", "1"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"check", " ", "for", " ", "NaN"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"s", ",", "\"\<nan\>\""}], "]"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"sign", ",", "Indeterminate", ",", "0"}], "}"}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"check", " ", "for", " ", "infinity"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"s", ",", "\"\<inf\>\""}], "]"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"sign", ",", "Infinity", ",", "0"}], "}"}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"determine", " ", "the", " ", "exact", " ", "value"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"s", ",", "\"\<e\>\""}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"mantissa", ",", "exponent"}], "}"}], "=", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"s", ",", "\"\<e\>\""}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"mantissa", ",", "exponent"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{"s", ",", "\"\<0\>\""}], "}"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"mantissa", ",", "\"\<.\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTake", "[", 
            RowBox[{"mantissa", ",", "1"}], "]"}], "\[Equal]", "\"\<.\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"int", ",", "frac"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{"\"\<0\>\"", ",", 
             RowBox[{"StringDrop", "[", 
              RowBox[{"mantissa", ",", "1"}], "]"}]}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringTake", "[", 
              RowBox[{"mantissa", ",", 
               RowBox[{"-", "1"}]}], "]"}], "\[Equal]", "\"\<.\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"int", ",", "frac"}], "}"}], "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"StringDrop", "[", 
                RowBox[{"mantissa", ",", 
                 RowBox[{"-", "1"}]}], "]"}], ",", "\"\<0\>\""}], "}"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"int", ",", "frac"}], "}"}], "=", 
             RowBox[{"StringSplit", "[", 
              RowBox[{"mantissa", ",", "\"\<.\>\""}], "]"}]}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"int", ",", "frac"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{"mantissa", ",", "\"\<0\>\""}], "}"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"decimals", "=", 
       RowBox[{"StringLength", "[", "frac", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"int", ",", "frac", ",", "exponent"}], "}"}], "=", 
       RowBox[{"ToExpression", "[", 
        RowBox[{"{", 
         RowBox[{"int", ",", "frac", ",", "exponent"}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "exact", " ", "value", " ", "of", " ", "input", " ", 
        "string"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"a", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"int", "*", 
           SuperscriptBox["10", "decimals"]}], "+", "frac"}], ")"}], 
        SuperscriptBox["10", 
         RowBox[{"exponent", "-", "decimals"}]]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "underflow", " ", "if", " ", "at", " ", "or", " ", "below", " ", 
        "halfway", " ", "between", " ", "0", " ", "and", " ", 
        RowBox[{"2", "^", 
         RowBox[{"-", "1074"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"a", "\[LessEqual]", 
         RowBox[{"2", "^", 
          RowBox[{"-", "1075"}]}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"sign", ",", "0", ",", "0"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"overflow", " ", "if", " ", "at", " ", "or", " ", "over", " ", 
        RowBox[{"1", "/", "2"}], " ", "ULP", " ", "past", " ", 
        RowBox[{"2", "^", "971"}], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "^", "53"}], "-", "1"}], ")"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"a", "\[GreaterEqual]", 
         RowBox[{
          RowBox[{"2", "^", "971"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "^", "53"}], "-", "1", "+", 
            RowBox[{"1", "/", "2"}]}], ")"}]}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"sign", ",", "Infinity", ",", "0"}], "}"}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{" ", 
         RowBox[{"scale", " ", 
          RowBox[{"into", " ", "[", 
           RowBox[{
            RowBox[{"2", "^", "52"}], ",", " ", 
            RowBox[{"2", "^", "53"}]}]}]}], ")"}], " ", "interval"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"scale", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "if", " ", "the", " ", "exact", " ", "value", " ", "is", " ", "below", 
        " ", "the", " ", "interval"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"a", "<", 
          RowBox[{"2", "^", "52"}]}], "&&", 
         RowBox[{"scale", ">", 
          RowBox[{"-", "1074"}]}]}], ",", 
        RowBox[{
         RowBox[{"a", "*=", "2"}], ";", 
         RowBox[{"scale", "-=", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "if", " ", "the", " ", "exact", " ", "value", " ", "is", " ", "above", 
        " ", "the", " ", "interval"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"a", ">=", 
         RowBox[{"2", "^", "53"}]}], ",", 
        RowBox[{
         RowBox[{"a", "/=", "2"}], ";", 
         RowBox[{"scale", "+=", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "significand", " ", "integer", " ", "part", " ", "and", " ", 
        "reminder"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Numerator", "[", "a", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"d", "=", 
       RowBox[{"Denominator", "[", "a", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sd", "=", 
       RowBox[{"IntegerPart", "[", "a", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", "=", 
       RowBox[{"n", "-", 
        RowBox[{"sd", "*", "d"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "significand", " ", "rounding", " ", "according", " ", "to", " ", 
         "IEEE"}], "-", 
        RowBox[{"754", " ", "round"}], "-", "half", "-", "to", "-", 
        RowBox[{"even", " ", "rule"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "r"}], ">", "d"}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"2", "r"}], "\[Equal]", "d"}], "&&", 
           RowBox[{"OddQ", "[", "sd", "]"}]}], ")"}]}], ",", 
        RowBox[{"sd", "+=", "1"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{" ", 
         RowBox[{
         "if", " ", "rounding", " ", "got", " ", "significand", " ", "out", 
          " ", 
          RowBox[{"of", " ", "[", 
           RowBox[{
            RowBox[{"2", "^", "52"}], ",", 
            RowBox[{"2", "^", "53"}]}]}]}], ")"}], " ", "interval"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"sd", "\[Equal]", 
         RowBox[{"2", "^", "53"}]}], ",", 
        RowBox[{
         RowBox[{"sd", "=", 
          RowBox[{"2", "^", "52"}]}], ";", 
         RowBox[{"scale", "+=", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"sign", ",", " ", "significand", ",", " ", 
        RowBox[{"power", " ", "of", " ", "2", " ", "scale", " ", "bias"}]}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"sign", ",", "sd", ",", "scale"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringToDouble", "[", "str_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"N", "[", 
      RowBox[{"#1", "*", "#2", "*", 
       RowBox[{"2", "^", "#3"}]}], "]"}], "&"}], "@@", 
    RowBox[{"StringToDoubleKernel", "@", "str"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringToDoubleBin", "[", "str_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sign", ",", "sd", ",", "scale", ",", "signBin", ",", "exponentBin", 
       ",", "mantissaBin"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"sign", ",", "sd", ",", "scale"}], "}"}], "=", 
       RowBox[{"StringToDoubleKernel", "[", "str", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"signBin", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"sign", "\[Equal]", "1"}], ",", 
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Which", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SameQ", "[", 
         RowBox[{"sd", ",", "Infinity"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"exponentBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"2047", ",", "2", ",", "11"}], "]"}]}], ";", 
         RowBox[{"mantissaBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"0", ",", "2", ",", "52"}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"SameQ", "[", 
         RowBox[{"sd", ",", "Indeterminate"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"exponentBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"2047", ",", "2", ",", "11"}], "]"}]}], ";", 
         RowBox[{"mantissaBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"1", ",", "2", ",", "52"}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"sd", "\[GreaterEqual]", 
         RowBox[{"2", "^", "52"}]}], ",", 
        RowBox[{"(*", " ", "normal", " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"exponentBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{
            RowBox[{"scale", "+", "1075"}], ",", "2", ",", "11"}], "]"}]}], 
         ";", 
         RowBox[{"mantissaBin", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{
            RowBox[{"IntegerDigits", "[", 
             RowBox[{"sd", ",", "2", ",", "53"}], "]"}], ",", "1"}], 
           "]"}]}]}], ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"(*", " ", "subnormal", " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"exponentBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"0", ",", "2", ",", "11"}], "]"}]}], ";", 
         RowBox[{"mantissaBin", "=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"sd", ",", "2", ",", "52"}], "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"IntegerString", "[", 
        RowBox[{
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"signBin", ",", "exponentBin", ",", "mantissaBin"}], 
            "]"}], ",", "2"}], "]"}], ",", "2", ",", "64"}], "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringToDoubleHex", "[", "str_", "]"}], ":=", 
   RowBox[{"IntegerString", "[", 
    RowBox[{
     RowBox[{"FromDigits", "[", 
      RowBox[{
       RowBox[{"StringToDoubleBin", "[", "str", "]"}], ",", "2"}], "]"}], ",",
      "16", ",", "16"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StringToDoubleInt", "[", "str_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sign", ",", "sd", ",", "scale", ",", "signStr", ",", "sdStr", ",", 
      "exponentStr"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"sign", ",", "sd", ",", "scale"}], "}"}], "=", 
      RowBox[{"StringToDoubleKernel", "[", "str", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"signStr", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"sign", "\[Equal]", "1"}], ",", "\"\<\>\"", ",", 
        "\"\<-\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SameQ", "[", 
        RowBox[{"sd", ",", "Infinity"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sdStr", "=", "\"\<inf\>\""}], ";", 
        RowBox[{"exponentStr", "=", "\"\<\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"SameQ", "[", 
        RowBox[{"sd", ",", "Indeterminate"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sdStr", "=", "\"\<nan\>\""}], ";", 
        RowBox[{"exponentStr", "=", "\"\<\>\""}]}], ",", 
       "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sdStr", "=", 
         RowBox[{"ToString", "[", "sd", "]"}]}], ";", 
        RowBox[{"exponentStr", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"scale", "\[NotEqual]", "0"}], ",", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"\"\<*2^\>\"", ",", 
             RowBox[{"ToString", "[", "scale", "]"}]}], "]"}], ",", 
           "\"\<\>\""}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"signStr", ",", "sdStr", ",", "exponentStr"}], "]"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.670513680503665*^9, 3.670513722955186*^9}, {
   3.6705140845996556`*^9, 3.6705143362761507`*^9}, {3.6705143742691936`*^9, 
   3.6705145253609347`*^9}, {3.6705146470221453`*^9, 3.670514664777693*^9}, {
   3.6705148562588463`*^9, 3.6705148808024197`*^9}, {3.6705159848344316`*^9, 
   3.6705159850422993`*^9}, {3.670517599002041*^9, 3.670517672090148*^9}, {
   3.6705177169621725`*^9, 3.670517725377572*^9}, {3.670521353864874*^9, 
   3.6705213574831157`*^9}, {3.6705242944988003`*^9, 3.6705243154507303`*^9}, 
   3.670524461251134*^9, {3.670682329369837*^9, 3.67068235518712*^9}, {
   3.6706825204958577`*^9, 3.670682541491683*^9}, {3.6706825896263256`*^9, 
   3.670682617406189*^9}, {3.6706826714536*^9, 3.670682713667407*^9}, {
   3.6706828792455454`*^9, 3.67068288423566*^9}, {3.6706830070872145`*^9, 
   3.67068301922348*^9}, {3.670683308283455*^9, 3.670683310221575*^9}, {
   3.670683418594436*^9, 3.67068344196111*^9}, {3.6706834730768414`*^9, 
   3.670683474452501*^9}, {3.670684027909708*^9, 3.6706840813710833`*^9}, {
   3.670684115802627*^9, 3.6706841181308126`*^9}, {3.6706842398200455`*^9, 
   3.670684251983425*^9}, {3.670684370183133*^9, 3.67068437025432*^9}}]
},
WindowSize->{888, 820},
WindowMargins->{{460, Automatic}, {Automatic, 103}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792}},
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (February 25, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 4199, 79, 657, "Text"],
Cell[4760, 101, 19108, 468, 2081, "Input"]
}
]
*)

